# """
# 输出100以内的素数

# 本程序用于计算并输出100以内的所有素数。
# 素数是只能被1和自身整除的大于1的自然数。
# 程序使用了试除法来判断素数，并采用了只检查到平方根的优化方法。

# Version: 1.0
# Author: 骆昊
# """

# # 遍历2到99的所有数字
# for num in range(2, 100):
#     # 假设当前数字是素数
#     is_prime = True
#     # 只需要检查到平方根，这是一个重要的优化
#     # 因为如果一个数不是素数，它的因子中至少有一个不大于它的平方根
#     for i in range(2, int(num ** 0.5) + 1):
#         # 如果能被整除，说明不是素数
#         if num % i == 0:
#             is_prime = False
#             break    # 找到一个因子后就可以停止检查
#     # 如果经过所有检查后仍然是素数，就输出该数
#     if is_prime:
#         print(num)


"""
输出斐波那契数列中的前20个数

斐波那契数列是一个以递推方式定义的数列，其中每个数字是前两个数字的和。
数列从0和1开始，接下来的数字依次为1, 2, 3, 5, 8, 13, 21, 34...
这个程序将输出斐波那契数列的前20个数。

Version: 1.0
Author: 骆昊
"""
# 初始化斐波那契数列的前两个值
# a表示当前数列中的数，b表示下一个数
a, b = 0, 1

# 循环20次，生成20个斐波那契数
# 使用下划线(_)作为循环变量表示我们不关心这个变量的具体值
for _ in range(20):
    # 同时更新a和b的值
    # a更新为b的值（当前的下一个数变成当前数）
    # b更新为a+b的值（计算新的下一个数，即当前两个数的和）
    # 注意：右侧的a和b是更新前的值
    a, b = b, a + b

    print(a)
